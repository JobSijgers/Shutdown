//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""e32c8455-3594-464f-838d-822d9cbada2a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""add2a08b-3734-4e8e-bf95-aa0e9843f698"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""da7c6e8a-2b82-449c-84d4-9e2c4c0873b7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Value"",
                    ""id"": ""bcc8f626-a1ed-4544-a17f-b8b648222cae"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Change Weapons"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0aee90c6-bb19-4528-b5ab-eb83d5c5a9ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b4002cc6-5ac7-4cca-98b1-27b64037e50a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""843a0eb0-2fa9-44e2-8b2d-82aa4799371d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f5b68ed-e05c-44e4-b796-538398539977"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1dc44dd-253e-46ec-936f-0b4c5b358fd7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""eb3218df-ca07-4112-a126-4b6d90d7c7fe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""34a87fba-faac-49cf-8689-f4a0d0774020"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""09ac5bfa-bc28-493f-9a34-11bc06ae87cd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2dcfd67d-7530-4746-9121-30dd30776cf5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""769fc3d0-93f8-48b1-b32e-32ea7d92466a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""628e4ab8-de7d-4538-abfc-b136c9ec943b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62da4610-d537-4879-b595-99150fb6ca95"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6c797ee-d99c-4294-a9de-78e4cd7c36de"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f107af4f-1842-441c-998d-fd0999e3a6d7"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Weapons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0cce5c4-4ef9-43dd-a645-744a29315537"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da1254a2-54d0-4f24-9cb2-fab902da7d72"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Intercation"",
            ""id"": ""6d7ba265-50bb-4da3-9323-1d26981dfa39"",
            ""actions"": [
                {
                    ""name"": ""Intercation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1dd5aa8d-28bd-4fa8-8095-a3f387c37a08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1efa2757-60cc-4803-9561-03fc83e99fb8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Intercation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""587741bc-576f-4320-ba21-5afbeb01b4d2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Intercation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""13abe77f-a7af-49f2-b80d-8cb762cb08d1"",
            ""actions"": [
                {
                    ""name"": ""OpenKeycardUI"",
                    ""type"": ""Value"",
                    ""id"": ""1c5e2de9-cbb1-44eb-8542-d1f346ebae78"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangePauseMenuState"",
                    ""type"": ""PassThrough"",
                    ""id"": ""05be6d2f-c47e-4e68-a279-e1051497930d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f2cb15d2-11b9-4819-9e0a-57ec54549485"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenKeycardUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb33c7c4-6fb0-4efb-abc1-625d954362bc"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePauseMenuState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6e0a527-2cb3-40de-9a49-d5770673ab15"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePauseMenuState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Movement = m_Controls.FindAction("Movement", throwIfNotFound: true);
        m_Controls_Aim = m_Controls.FindAction("Aim", throwIfNotFound: true);
        m_Controls_Shoot = m_Controls.FindAction("Shoot", throwIfNotFound: true);
        m_Controls_ChangeWeapons = m_Controls.FindAction("Change Weapons", throwIfNotFound: true);
        m_Controls_Reload = m_Controls.FindAction("Reload", throwIfNotFound: true);
        // Intercation
        m_Intercation = asset.FindActionMap("Intercation", throwIfNotFound: true);
        m_Intercation_Intercation = m_Intercation.FindAction("Intercation", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_OpenKeycardUI = m_UI.FindAction("OpenKeycardUI", throwIfNotFound: true);
        m_UI_ChangePauseMenuState = m_UI.FindAction("ChangePauseMenuState", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private IControlsActions m_ControlsActionsCallbackInterface;
    private readonly InputAction m_Controls_Movement;
    private readonly InputAction m_Controls_Aim;
    private readonly InputAction m_Controls_Shoot;
    private readonly InputAction m_Controls_ChangeWeapons;
    private readonly InputAction m_Controls_Reload;
    public struct ControlsActions
    {
        private @CustomInput m_Wrapper;
        public ControlsActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Controls_Movement;
        public InputAction @Aim => m_Wrapper.m_Controls_Aim;
        public InputAction @Shoot => m_Wrapper.m_Controls_Shoot;
        public InputAction @ChangeWeapons => m_Wrapper.m_Controls_ChangeWeapons;
        public InputAction @Reload => m_Wrapper.m_Controls_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMovement;
                @Aim.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnAim;
                @Shoot.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnShoot;
                @ChangeWeapons.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnChangeWeapons;
                @ChangeWeapons.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnChangeWeapons;
                @ChangeWeapons.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnChangeWeapons;
                @Reload.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnReload;
            }
            m_Wrapper.m_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ChangeWeapons.started += instance.OnChangeWeapons;
                @ChangeWeapons.performed += instance.OnChangeWeapons;
                @ChangeWeapons.canceled += instance.OnChangeWeapons;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
            }
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);

    // Intercation
    private readonly InputActionMap m_Intercation;
    private IIntercationActions m_IntercationActionsCallbackInterface;
    private readonly InputAction m_Intercation_Intercation;
    public struct IntercationActions
    {
        private @CustomInput m_Wrapper;
        public IntercationActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Intercation => m_Wrapper.m_Intercation_Intercation;
        public InputActionMap Get() { return m_Wrapper.m_Intercation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IntercationActions set) { return set.Get(); }
        public void SetCallbacks(IIntercationActions instance)
        {
            if (m_Wrapper.m_IntercationActionsCallbackInterface != null)
            {
                @Intercation.started -= m_Wrapper.m_IntercationActionsCallbackInterface.OnIntercation;
                @Intercation.performed -= m_Wrapper.m_IntercationActionsCallbackInterface.OnIntercation;
                @Intercation.canceled -= m_Wrapper.m_IntercationActionsCallbackInterface.OnIntercation;
            }
            m_Wrapper.m_IntercationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Intercation.started += instance.OnIntercation;
                @Intercation.performed += instance.OnIntercation;
                @Intercation.canceled += instance.OnIntercation;
            }
        }
    }
    public IntercationActions @Intercation => new IntercationActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_OpenKeycardUI;
    private readonly InputAction m_UI_ChangePauseMenuState;
    public struct UIActions
    {
        private @CustomInput m_Wrapper;
        public UIActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenKeycardUI => m_Wrapper.m_UI_OpenKeycardUI;
        public InputAction @ChangePauseMenuState => m_Wrapper.m_UI_ChangePauseMenuState;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @OpenKeycardUI.started -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenKeycardUI;
                @OpenKeycardUI.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenKeycardUI;
                @OpenKeycardUI.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnOpenKeycardUI;
                @ChangePauseMenuState.started -= m_Wrapper.m_UIActionsCallbackInterface.OnChangePauseMenuState;
                @ChangePauseMenuState.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnChangePauseMenuState;
                @ChangePauseMenuState.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnChangePauseMenuState;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenKeycardUI.started += instance.OnOpenKeycardUI;
                @OpenKeycardUI.performed += instance.OnOpenKeycardUI;
                @OpenKeycardUI.canceled += instance.OnOpenKeycardUI;
                @ChangePauseMenuState.started += instance.OnChangePauseMenuState;
                @ChangePauseMenuState.performed += instance.OnChangePauseMenuState;
                @ChangePauseMenuState.canceled += instance.OnChangePauseMenuState;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnChangeWeapons(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
    public interface IIntercationActions
    {
        void OnIntercation(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnOpenKeycardUI(InputAction.CallbackContext context);
        void OnChangePauseMenuState(InputAction.CallbackContext context);
    }
}
